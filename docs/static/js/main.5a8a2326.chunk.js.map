{"version":3,"sources":["firebase/firebase.config.js","helpers/loadGifsFromFirebase.js","types/types.js","actions/favoriteGifs.js","components/GifGridItem.js","components/Favorites/FavoriteScreen.js","components/AddCategory.js","Button/ButtonLogin.js","components/Alert/Alert.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","actions/loading.js","actions/auth.js","components/Header/Header.js","Router/RoutesComponent.js","pictures/undraw_welcome_cats_thqn.svg","components/LoginAndRegister/LoginFields.js","components/LoginAndRegister/RegisterFields.js","components/LoginAndRegister/Form.js","hooks/useForm.js","components/LoginAndRegister/LoginAndRegisterScreen.js","Router/LoggedRender.js","Router/AppRouter.js","helpers/parseJwt.js","reducers/authReducer.js","reducers/favoriteGifsReducer.js","store/store.js","reducers/isLoadingReducer.js","App.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","loadGifsFromFirebase","uid","a","gifs","getDocs","collection","forEach","doc","data","id","addToFavorite","newGif","addDoc","console","log","types","favoriteGifs","type","payload","loadFavoriteGifs","GifGridItem","title","url","isFavorite","setAlertLogin","refButton","useRef","dispatch","useDispatch","useSelector","state","auth","isLoggedIn","items","favorite","handleAddFavorite","newId","current","style","backgroundColor","color","className","src","alt","onClick","removeGifs","item","deleteDoc","then","catch","error","ref","FavoriteScreen","length","map","key","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","trim","category","alert","preventDefault","value","onChange","target","placeholder","ButtonLogin","text","Alert","to","getGifs","encodeURI","fetch","res","json","img","images","downsized_medium","GifGrid","loading","setState","useEffect","imgs","useFetchGifs","GifExpertApp","categories","alertLogin","openLoading","closeLoading","login","authState","Header","localStorage","removeItem","RoutesComponent","favoritesItems","loadFavoriteGifsAsync","exact","path","element","LoginFields","values","handleInputChange","email","password","autoComplete","name","RegisterFields","confirmPassowrd","Form","setstate","initialState","setValues","useForm","reset","method","headers","body","JSON","stringify","token","jwt","user","msg","Swal","fire","icon","setItem","errors","registerAction","LoginAndRegisterScreen","welcome","LoggedRender","children","AppRouter","parse","getItem","exp","base64","split","replace","window","atob","parseJwt","Date","now","displatch","authRes","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a8a2326.chunk.js","sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { getFirestore } from 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCyFTsrW2dOv7Ax7IYwTguiR8y1F0tuQpE\",\r\n    authDomain: \"gif-app-89297.firebaseapp.com\",\r\n    projectId: \"gif-app-89297\",\r\n    storageBucket: \"gif-app-89297.appspot.com\",\r\n    messagingSenderId: \"677803113629\",\r\n    appId: \"1:677803113629:web:ecc183262f383a76dfa874\"\r\n}\r\n\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nexport const db = getFirestore(app);\r\n","import { addDoc, collection, getDocs } from \"firebase/firestore\"\r\nimport { db } from \"../firebase/firebase.config\"\r\n\r\nexport const loadGifsFromFirebase = async (uid) => {\r\n    let gifs = [];\r\n    const query = await getDocs(collection(db, `${uid}`));\r\n    query.forEach(doc => {\r\n        gifs = [...gifs, { ...doc.data(), id: doc.id }]\r\n    });\r\n    return gifs;\r\n}\r\n\r\nexport const addToFavorite = async (newGif, uid) => {\r\n    try {\r\n        const {id} = await addDoc(collection(db, `${uid}`), newGif);\r\n        return id;\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","export const types = {\r\n    login: '[auth] login', \r\n    logout: '[auth] logout',\r\n\r\n    openLoading: '[loading] open', \r\n    closeLoading: '[loading] close',\r\n\r\n    loadGifs: '[gifs] load gifs',\r\n    addNewGif: '[gifs] add new',\r\n    removeGifs: '[gifs] remove gifs', \r\n    cleanGifs: '[gifs] clean gifs after to logout'\r\n}","import { loadGifsFromFirebase } from \"../helpers/loadGifsFromFirebase\";\r\nimport { types } from \"../types/types\";\r\n\r\nexport const loadFavoriteGifsAsync = (uid) => {\r\n    return async ( dispatch ) => {\r\n        const favoritesItems = await loadGifsFromFirebase(uid);\r\n        dispatch(loadFavoriteGifs(favoritesItems));\r\n    }\r\n}\r\n\r\nexport const favoriteGifs = (newGif) => ({\r\n    type: types.addNewGif,\r\n    payload: newGif\r\n})\r\n\r\nexport const removeGifs = (id) => ({\r\n    type: types.removeGifs,\r\n    payload: id\r\n})\r\n\r\nexport const cleanGifsAfterToLogout = () => ({\r\n    type: types.cleanGifs,\r\n})\r\n\r\nexport const loadFavoriteGifs = ( gifs ) => ({\r\n    type: types.loadGifs,\r\n    payload: gifs\r\n})","import React, { useRef } from 'react';\r\nimport { deleteDoc, doc } from 'firebase/firestore';\r\nimport { db } from '../firebase/firebase.config';\r\nimport { addToFavorite } from '../helpers/loadGifsFromFirebase';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { favoriteGifs, removeGifs } from '../actions/favoriteGifs';\r\nexport const GifGridItem = ({ title, id, url, isFavorite, setAlertLogin }) => {\r\n\r\n    const refButton = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const { uid, isLoggedIn } = useSelector(state => state.auth);\r\n    const items = useSelector(state => state.favorite);\r\n\r\n    const handleAddFavorite = async () => {\r\n        if (isLoggedIn) {\r\n            const newGif = {\r\n                title,\r\n                url,\r\n                id,\r\n                isFavorite: true\r\n            }\r\n            const newId = await addToFavorite(newGif, uid);\r\n            dispatch(favoriteGifs({ ...newGif, id: newId }));\r\n            refButton.current.style.backgroundColor = '#22B244';\r\n            refButton.current.style.color = '#fff';\r\n        } else {\r\n            setAlertLogin(true);\r\n        }\r\n    }\r\n    const handleRemoveFromFavorites = () => {\r\n        dispatch(removeGifs(id));\r\n        items.forEach(item => {\r\n            if (item.id === id) {\r\n                deleteDoc(doc(db, `${uid}/${id}`))\r\n                    .then(() => {\r\n                    })\r\n                    .catch((error) => console.log(error))\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='card' >\r\n            <img\r\n                src={url}\r\n                alt={title}\r\n                className=\"gif\"\r\n            />\r\n            <p>{title}</p>\r\n            {\r\n                !isFavorite ?\r\n                    <button\r\n                        onClick={handleAddFavorite}\r\n                        ref={refButton}\r\n                    >\r\n                        <img\r\n                            src='./pictures/star_black_24dp.svg'\r\n                            alt=\"star-img\"\r\n                            id=\"star-img\"\r\n                        />\r\n                        ADD TO FAVORITES\r\n                    </button>\r\n                    :\r\n                    <button\r\n                        onClick={handleRemoveFromFavorites}\r\n                        ref={refButton}\r\n                    >\r\n                        <img\r\n                            src='./pictures/star_black_24dp.svg'\r\n                            alt=\"star-img\"\r\n                            id=\"star-img\"\r\n                        />\r\n                        REMOVE FROM FAVORITES\r\n                    </button>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { GifGridItem } from '../GifGridItem';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const FavoriteScreen = () => {\r\n\r\n    const { isLoggedIn } = useSelector(state => state.auth);\r\n    const favoriteGifs = useSelector(state => state.favorite);\r\n    return (\r\n        <section>\r\n            {\r\n                isLoggedIn ?\r\n                    <article className=\"gif-card-container favorites\">\r\n                        {\r\n                            favoriteGifs.length > 0 ?\r\n                                favoriteGifs.map(item => <GifGridItem {...item} key={item.id} />)\r\n                                :\r\n                                <>YOU HAVE NOT GIFS SAVED</>\r\n                        }\r\n                    </article>\r\n                    :\r\n                    <article className=\"favorite-screen-denied\">\r\n                        LOG IN TO SAVE YOUR FAVORITES GIFS\r\n                    </article>\r\n            }\r\n        </section>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n\r\n    }\r\n    const handleSubmit = (e) => {\r\n        if( inputValue.trim().length > 2){\r\n            setCategories(category => [inputValue,...category]);\r\n            setInputValue('');\r\n        }else{\r\n            alert('Please enter a value')\r\n        }\r\n        e.preventDefault();\r\n    }\r\n    return (\r\n        <section className=\"search-gif\">\r\n            <form onSubmit={ handleSubmit }>\r\n                <label>Search</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={ inputValue }\r\n                    onChange={ handleInputChange }\r\n                    placeholder=\"New Category\" />\r\n                <input type=\"submit\" value=\"Add\" />\r\n            </form>\r\n        </section>\r\n    );\r\n\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\nexport default AddCategory;\r\n","import React from 'react';\r\n\r\nexport const ButtonLogin = ({ text }) => {\r\n\r\n    return (\r\n        <button\r\n        className=\"auth-buttons\"\r\n        // onClick={ onClick }\r\n        >\r\n           { text }\r\n        </button>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { ButtonLogin } from '../../Button/ButtonLogin';\r\nexport const Alert = ({setAlertLogin}) => {\r\n\r\n    return (\r\n        <section \r\n        className=\"alert-login-container\"\r\n        onClick={()=>setAlertLogin()}\r\n        >\r\n           <article className=\"modal\">\r\n                LOGIN\r\n            <Link to=\"/auth\">\r\n               <ButtonLogin text=\"LOG IN\"/>\r\n            </Link>\r\n                <img src='./pictures/close_black_24dp.svg' alt=\"close-button\" />\r\n           </article>\r\n        </section>\r\n    )\r\n}\r\n","\r\nexport const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&lImit=20&api_key=1ywURhrBl5cdf1Eqb0nCB2PLVy7Yme9o`;\r\n    const res = await fetch(url);\r\n    const { data } = await res.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nconst GifGrid = ({ category, setAlertLogin }) => {\r\n\r\n\r\n    const { data: images } = useFetchGifs(category);\r\n\r\n    return (\r\n        <section>\r\n            <article className=\"gif-title\">\r\n                <h3> {category} </h3>\r\n            </article>\r\n            <article className=\"gif-card-container\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem key={img.id} {...img} isFavorite={false} setAlertLogin={setAlertLogin}/>\r\n                    ))\r\n                }\r\n            </article>\r\n            {/* Looading animation */}\r\n            {/* {loading && <p className = \"animate__animated  animate__shakeX\">Cargando...</p>} */}\r\n        </section>\r\n    );\r\n\r\n}\r\n\r\nexport default GifGrid;","import { useState, useEffect } from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n        });\r\n\r\n    }, [category]);\r\n\r\n\r\n    return state; //{data: [], loading: true}\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport { Alert } from './Alert/Alert';\r\nimport GifGrid from './GifGrid';\r\n\r\n\r\nfunction GifExpertApp() {\r\n\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  const [alertLogin, setAlertLogin] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      {\r\n        alertLogin &&\r\n        <Alert setAlertLogin={setAlertLogin}/>\r\n      }\r\n      <AddCategory setCategories={setCategories}  />\r\n      {categories.map(category =>\r\n        <GifGrid category={category} key={category} setAlertLogin={setAlertLogin} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\nexport default GifExpertApp;","import { types } from \"../types/types\";\r\n\r\nexport const openLoading = () => ({\r\n    type: types.openLoading,\r\n})\r\n\r\nexport const closeLoading = () => ({\r\n    type: types.closeLoading,\r\n})","import { types } from \"../types/types\";\r\nimport { closeLoading } from \"./loading\";\r\nimport Swal from 'sweetalert2';\r\n\r\nexport const loginAction = ( email, password) => {\r\n    return async ( dispatch ) => {\r\n        const body = await fetch('http://localhost:8080/api/auth/login', {\r\n            method:\"POST\", \r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({email, password})\r\n        })\r\n        const { jwt:token, user, msg }= await body.json();\r\n        if( msg ){\r\n            Swal.fire({\r\n                title: 'Error',\r\n                icon: 'error',\r\n                text:msg\r\n            })\r\n            dispatch(closeLoading());\r\n            return;\r\n        }\r\n\r\n        localStorage.setItem('token', JSON.stringify(token));\r\n        dispatch(login(user));\r\n        dispatch(closeLoading());\r\n    }\r\n}\r\n\r\nexport const registerAction = (name, email, password) => {\r\n    return async ( dispatch ) => {\r\n        const body = await fetch('http://localhost:8080/api/auth/register', {\r\n            method: \"POST\", \r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({name, email, password})\r\n        })\r\n        const {jwt:token, user, errors} = await body.json();\r\n        if( errors ){\r\n            Swal.fire({\r\n                title:'Error', \r\n                icon:'error', \r\n                text:errors[0].msg\r\n            })\r\n            dispatch(closeLoading());\r\n            return;\r\n        }\r\n        localStorage.setItem('token', JSON.stringify(token));\r\n        dispatch(login(user));\r\n        dispatch(closeLoading());\r\n    } \r\n}\r\n\r\n\r\nexport const validSession = () => {\r\n    return ( displatch ) => {\r\n        const token = JSON.parse(localStorage.getItem('token'));\r\n        fetch('http://localhost:8080/api/auth/validate', {\r\n            headers: {\r\n                'x-token': token\r\n            }\r\n        })\r\n        .then( res => res.json())\r\n        .then( authRes => {\r\n            displatch(login(authRes));\r\n            displatch(closeLoading());\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => ({\r\n    type: types.logout, \r\n})\r\n\r\nconst login = (authState) => ({\r\n    type: types.login,\r\n    payload: authState\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { logout } from '../../actions/auth';\r\nimport { cleanGifsAfterToLogout } from '../../actions/favoriteGifs';\r\n\r\nexport const Header = () => {\r\n\r\n    const { isLoggedIn } = useSelector(state => state.auth);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleLogout = () => {\r\n        dispatch(cleanGifsAfterToLogout());\r\n        dispatch(logout());\r\n        localStorage.removeItem('token');\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <img src='./pictures/search_black_24dp.svg' alt=\"search-img\" />\r\n                        <Link to=\"/\" >\r\n                            Home\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <img src='./pictures/star_black_24dp.svg' alt=\"star-img\" />\r\n                        <Link to=\"/favorites\" >\r\n                            Favorites\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n                <ul>\r\n                    {\r\n                        isLoggedIn ?\r\n                            (\r\n                                (<li\r\n                                    className=\"auth-buttons\"\r\n                                    onClick={handleLogout}\r\n                                >\r\n                                    Log out\r\n                                </li>)\r\n                            ) : (\r\n                                <Link to=\"/auth\">\r\n                                    <li\r\n                                        className=\"auth-buttons\"\r\n                                    >\r\n                                        Log In\r\n                                    </li>\r\n                                </Link>\r\n                            )\r\n                    }\r\n\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    );\r\n}","import React, { useEffect } from 'react';\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport { FavoriteScreen } from '../components/Favorites/FavoriteScreen';\r\nimport GifExpertApp from '../components/GifExpertApp';\r\nimport { Header } from '../components/Header/Header';\r\nimport { useSelector, useDispatch } from 'react-redux'; \r\nimport { loadFavoriteGifsAsync } from '../actions/favoriteGifs';\r\n\r\nexport const RoutesComponent = () => {\r\n\r\n    const {uid} = useSelector(state => state.auth);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if( uid ){\r\n            dispatch(loadFavoriteGifsAsync(uid));\r\n        }\r\n    }, [dispatch, uid])\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Header />\r\n            <Routes>\r\n                <Route exact path=\"/\" element={<GifExpertApp />} />\r\n                <Route path=\"/favorites\" element={<FavoriteScreen />} />\r\n                <Route path=\"*\" element={<h4>not found</h4>} />\r\n            </Routes>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/undraw_welcome_cats_thqn.b6a961e7.svg\";","import React from 'react';\r\n\r\nexport const LoginFields = ({values, handleInputChange}) => {\r\n    const { email, password } = values;\r\n    return (\r\n        <>\r\n            <div className=\"form-group\">\r\n                <label>Email</label>\r\n                <input\r\n                    type=\"email\"\r\n                    autoComplete=\"off\"\r\n                    name=\"email\"\r\n                    value={email}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label>Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    autoComplete=\"off\"\r\n                    name=\"password\"\r\n                    value={password}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport const RegisterFields = ({values, handleInputChange}) => {\r\n    const { name, email, password, confirmPassowrd } = values;\r\n    return (\r\n        <>\r\n        <div className=\"form-group\">\r\n            <label>Name</label>\r\n            <input\r\n                type=\"text\"\r\n                autoComplete=\"off\"\r\n                name=\"name\"\r\n                value={name}\r\n                onChange={handleInputChange}\r\n            />\r\n        </div>\r\n        <div className=\"form-group\">\r\n            <label>Email</label>\r\n            <input\r\n                type=\"email\"\r\n                autoComplete=\"off\"\r\n                name=\"email\"\r\n                value={email}\r\n                onChange={handleInputChange}\r\n            />\r\n        </div>\r\n        <div className=\"form-group\">\r\n            <label>Password</label>\r\n            <input\r\n                type=\"password\"\r\n                autoComplete=\"off\"\r\n                name=\"password\"\r\n                value={password}\r\n                onChange={handleInputChange}\r\n            />\r\n        </div>\r\n        <div className=\"form-group\">\r\n            <label>Confirm</label>\r\n            <input\r\n                type=\"password\"\r\n                autoComplete=\"off\"\r\n                name=\"confirmPassowrd\"\r\n                value={confirmPassowrd}\r\n                onChange={handleInputChange}\r\n            />\r\n        </div>\r\n    </>\r\n    );\r\n}\r\n","import React, { useState } from 'react'\r\nimport { loginAction, registerAction } from '../../actions/auth';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { LoginFields } from './LoginFields';\r\nimport { RegisterFields } from './RegisterFields';\r\nimport { useDispatch } from 'react-redux';\r\nimport { openLoading } from '../../actions/loading';\r\n\r\nexport const Form = () => {\r\n\r\n    const [state, setstate] = useState(\"login\");\r\n    const [values, handleInputChange, reset] = useForm({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassowrd: '',\r\n    });\r\n    const handleChange = () => {\r\n        if (state === \"login\") {\r\n            setstate(\"register\")\r\n        } else {\r\n            setstate(\"login\")\r\n        }\r\n        reset();\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (state === \"login\") {\r\n            dispatch(openLoading());\r\n            dispatch(loginAction(values.email, values.password));\r\n        }else{\r\n            dispatch(openLoading());\r\n            dispatch(registerAction(values.name, values.email, values.password));\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form>\r\n            <h3>{state === \"login\" ? \"LOGIN\" : \"REGISTER\"}</h3>\r\n            {\r\n                state === \"login\" ?\r\n                    <LoginFields values={values} handleInputChange={handleInputChange} />\r\n                    :\r\n                    <RegisterFields values={values} handleInputChange={handleInputChange} />\r\n            }\r\n            <input\r\n                type=\"submit\"\r\n                onClick={handleSubmit}\r\n                className=\"submit_button\"\r\n            />\r\n\r\n            <p>{state === \"login\" ? \"I haven't a account\" : \"I have a account\"}</p><span\r\n            onClick={handleChange}\r\n            >\r\n                {state === \"login\" ? \"Register\" : \"Login\"}\r\n            </span>\r\n        </form>\r\n    );\r\n}\r\n","import { useState } from \"react\"\r\n\r\n\r\nexport const useForm = (initialState = {}) => {\r\n\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues(initialState);\r\n    }\r\n\r\n    const handleInputChange = ({ target }) => {\r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value\r\n        });\r\n    }\r\n\r\n    return [values, handleInputChange, reset];\r\n\r\n}\r\n","import React from 'react';\r\nimport welcome from '../../pictures/undraw_welcome_cats_thqn.svg';\r\nimport { Form } from './Form';\r\nexport const LoginAndRegisterScreen = () => {\r\n\r\n    return (\r\n        <main>\r\n            <section className=\"login_and_register\">\r\n                <article className=\"login_and_register_container\">\r\n                    <article className=\"login_and_register_img_container\">\r\n                        <img src={welcome} alt=\"welcome\" />\r\n                    </article>\r\n                    <article className=\"login_and_register_text_container\">\r\n                        <h2> Login or Register and starts to save gifs</h2>\r\n                    </article>\r\n                </article>\r\n            </section>\r\n            <section className=\"forms\">\r\n                <Form />\r\n            </section>\r\n        </main>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Navigate } from 'react-router-dom'\r\n\r\nexport const LoggedRender = ({ children, isLoggedIn }) => {\r\n    return isLoggedIn ?\r\n    <Navigate to=\"/\" />\r\n    :\r\n    children\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nimport { RoutesComponent } from './RoutesComponent';\r\nimport { LoginAndRegisterScreen } from '../components/LoginAndRegister/LoginAndRegisterScreen';\r\nimport { LoggedRender } from './LoggedRender';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { validSession } from '../actions/auth';\r\nimport { closeLoading } from '../actions/loading';\r\nimport { parseJwt } from '../helpers/parseJwt';\r\n\r\nexport const AppRouter = () => {\r\n    // const [auth, setAuth] = useState(null);\r\n    // const [isLoading, setIsLoading] = useState(true);\r\n    // const { setItems } = useContext(ItemsContext);\r\n\r\n    const loading = useSelector(state => state.loading);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        const token = JSON.parse(localStorage.getItem('token'));\r\n\r\n        if (token) {\r\n            const { exp } = parseJwt(token);\r\n            if (Date.now() >= (exp * 1000)) {\r\n                dispatch(closeLoading());\r\n                localStorage.removeItem('token');\r\n            } else {\r\n                dispatch(validSession());\r\n            }\r\n        } else {\r\n            dispatch(closeLoading());\r\n        }\r\n        // setIsLoading(false);\r\n    }, [dispatch])\r\n\r\n    // useEffect(() => {\r\n    //     if ( loading ){\r\n    //         console.log(uid)\r\n    //         // loadGifsFromFirebase();\r\n    //     }\r\n    // }, [])\r\n\r\n    // const [ authState ] = useAuth();\r\n    // const { isLoggedIn } = authState;\r\n    // useEffect(() => {\r\n    //     setAuth(authState);\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     const token = JSON.parse(localStorage.getItem('token'));\r\n    //     if (token) {\r\n    //         fetch('http://localhost:8080/api/auth/validate', {\r\n    //             headers: {\r\n    //                 'x-token': token,\r\n    //             }\r\n    //         })\r\n    //             .then(response => response.json())\r\n    //             .then(res => {\r\n    //                 setAuth(res);\r\n    //                 setIsLoggedIn(true);\r\n    //                 loadGifsFromFirebase(res.uid).then( res => {\r\n    //                     setIsLoading(false);\r\n    //                     setItems(res)\r\n    //                 })\r\n    //             })\r\n    //     } else {\r\n    //         setIsLoading(false);\r\n    //     }\r\n    // }, [setItems])\r\n\r\n    const { isLoggedIn } = useSelector(state => state.auth);\r\n\r\n    if (loading) {\r\n        return (\r\n            <>Loading</>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <Routes>\r\n                <Route exact path=\"/*\" element={\r\n                    <RoutesComponent />\r\n                } />\r\n\r\n\r\n                <Route path=\"/auth\" element={\r\n                    <LoggedRender isLoggedIn={isLoggedIn}>\r\n                        <LoginAndRegisterScreen />\r\n                    </LoggedRender>\r\n                } />\r\n\r\n                {/* <Route path=\"*\" element={ <h1>Not found error</h1> }/> */}\r\n            </Routes>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n","\r\nexport function parseJwt (token) {\r\n    var base64Url = token.split('.')[1];\r\n    var base64 = base64Url.replace('-', '+').replace('_', '/');\r\n    return JSON.parse(window.atob(base64));\r\n};\r\n","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    name: null,\r\n    email: null,\r\n    uid:null,\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action?.type) {\r\n        case types.login:\r\n            return {\r\n                ...state, \r\n                ...action.payload,\r\n                isLoggedIn: true,\r\n            }\r\n        case types.logout:\r\n            return {\r\n                ...state, \r\n                isLoggedIn: false,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { types } from \"../types/types\";\r\n\r\nconst initialState = [];\r\n\r\n\r\nexport const favoriteGifsReducer = ( state =initialState, action) => {\r\n    switch(action.type){\r\n        case types.addNewGif:\r\n            return [ ...state, action.payload]\r\n        case types.loadGifs:\r\n            return [ ...action.payload]\r\n        case types.removeGifs:\r\n            return state.filter(item => item.id !== action.payload)\r\n        case types.cleanGifs:\r\n            return state = [];\r\n            default: \r\n        return state;\r\n    }\r\n}\r\n","import { createStore, applyMiddleware, combineReducers, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { authReducer } from '../reducers/authReducer';\r\nimport { favoriteGifsReducer } from '../reducers/favoriteGifsReducer';\r\nimport { isLoadingReducer } from '../reducers/isLoadingReducer';\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    loading: isLoadingReducer,\r\n    favorite: favoriteGifsReducer\r\n})\r\n\r\nexport const store = createStore(\r\n    reducers, \r\n    composeEnhancers(applyMiddleware(thunk))\r\n)\r\n\r\n","import { types } from \"../types/types\";\r\n\r\nconst isLoading = true;\r\n\r\nexport const isLoadingReducer = (state = isLoading, action) => {\r\n    switch (action?.type) {\r\n        case types.openLoading:\r\n            return state = true;\r\n        case types.closeLoading:\r\n            return state = false;\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport { AppRouter } from './Router/AppRouter';\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from './store/store';\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <Provider store={store}>\r\n            <AppRouter />\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n\r\n  <App />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}